import tkinter as tk
from tkinter import messagebox
import threading
import time
import sys
import os
from pynput import keyboard
from pynput.keyboard import Key, KeyCode
import win32api
import win32con
import win32gui
import ctypes
from ctypes import wintypes

# Windows API constants
WH_KEYBOARD_LL = 13
WM_KEYDOWN = 0x0100
WM_SYSKEYDOWN = 0x0104

# Key codes
VK_LWIN = 0x5B
VK_RWIN = 0x5C
VK_TAB = 0x09
VK_F4 = 0x73
VK_MENU = 0x12  # Alt key
VK_CONTROL = 0x11
VK_SHIFT = 0x10
VK_DELETE = 0x2E
VK_ESCAPE = 0x1B

class ScreenProtector:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Screen Protector")
        
        # Thi·∫øt l·∫≠p fullscreen v√† lu√¥n ·ªü tr√™n c√πng
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-topmost', True)
        self.root.overrideredirect(True)  # ·∫®n thanh ti√™u ƒë·ªÅ
        
        # Thi·∫øt l·∫≠p m√†u n·ªÅn ƒëen
        self.root.configure(bg='black')
        
        # T·∫°o frame ch√≠nh
        self.main_frame = tk.Frame(self.root, bg='black')
        self.main_frame.pack(expand=True, fill='both')
        
        # T·∫°o label hi·ªÉn th·ªã th√¥ng b√°o
        self.message_label = tk.Label(
            self.main_frame,
            text="M√†n h√¨nh ƒë√£ ƒë∆∞·ª£c kh√≥a\nVui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m·ªü kh√≥a",
            font=('Arial', 24, 'bold'),
            fg='white',
            bg='black',
            justify='center'
        )
        self.message_label.pack(expand=True)
        
        # T·∫°o frame cho m·∫≠t kh·∫©u
        self.password_frame = tk.Frame(self.main_frame, bg='black')
        self.password_frame.pack(pady=50)
        
        # Label cho m·∫≠t kh·∫©u
        self.password_label = tk.Label(
            self.password_frame,
            text="M·∫≠t kh·∫©u:",
            font=('Arial', 16),
            fg='white',
            bg='black'
        )
        self.password_label.pack()
        
        # Entry cho nh·∫≠p m·∫≠t kh·∫©u
        self.password_entry = tk.Entry(
            self.password_frame,
            font=('Arial', 16),
            show='*',
            width=20
        )
        self.password_entry.pack(pady=10)
        self.password_entry.focus()
        
        # N√∫t ƒëƒÉng nh·∫≠p
        self.login_button = tk.Button(
            self.password_frame,
            text="ƒêƒÉng nh·∫≠p",
            font=('Arial', 14),
            command=self.check_password,
            bg='#4CAF50',
            fg='white',
            relief='flat',
            padx=20,
            pady=10
        )
        self.login_button.pack(pady=10)
        
        # N√∫t tho√°t
        self.exit_button = tk.Button(
            self.password_frame,
            text="Tho√°t",
            font=('Arial', 14),
            command=self.exit_app,
            bg='#f44336',
            fg='white',
            relief='flat',
            padx=20,
            pady=10
        )
        self.exit_button.pack(pady=5)
        
        # M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ thay ƒë·ªïi)
        self.correct_password = "123456"
        
        # Bind ph√≠m Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p
        self.password_entry.bind('<Return>', lambda event: self.check_password())
        
        # Bind ph√≠m Escape ƒë·ªÉ tho√°t
        self.root.bind('<Escape>', lambda event: self.exit_app())
        
        # Thi·∫øt l·∫≠p focus cho entry
        self.password_entry.focus_set()
        
        # Bi·∫øn ƒë·ªÉ theo d√µi s·ªë l·∫ßn th·ª≠ sai
        self.attempts = 0
        self.max_attempts = 3
        
        # Kh·ªüi t·∫°o keyboard listener
        self.keyboard_listener = None
        self.running = True
        
        # Bind focus events ƒë·ªÉ qu·∫£n l√Ω hook
        self.password_entry.bind('<FocusIn>', self.on_password_focus_in)
        self.password_entry.bind('<FocusOut>', self.on_password_focus_out)
        
        # Kh·ªüi ƒë·ªông Windows API hook tr∆∞·ªõc
        self.start_windows_hook()
        
        # Kh·ªüi ƒë·ªông thread gi√°m s√°t ph√≠m t·∫Øt h·ªá th·ªëng
        self.monitor_thread = threading.Thread(target=self.monitor_system_keys, daemon=True)
        self.monitor_thread.start()
        
        # Kh·ªüi ƒë·ªông keyboard hook
        self.start_keyboard_hook()
        
        # Bind s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def start_windows_hook(self):
        """Kh·ªüi ƒë·ªông Windows API keyboard hook"""
        try:
            # ƒê·ªãnh nghƒ©a callback function v·ªõi ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
            def keyboard_proc(nCode, wParam, lParam):
                if nCode >= 0:
                    if wParam == WM_KEYDOWN or wParam == WM_SYSKEYDOWN:
                        try:
                            # L·∫•y virtual key code t·ª´ lParam - s·ª≠a l·ªói ki·ªÉu d·ªØ li·ªáu
                            vk_code = ctypes.cast(lParam, ctypes.POINTER(ctypes.c_ulong)).contents.value & 0xFF
                            
                            # Ch·∫∑n Windows key
                            if vk_code in [VK_LWIN, VK_RWIN]:
                                print("üö´ Ch·∫∑n Windows key b·∫±ng Windows API")
                                return 1  # Ch·∫∑n ph√≠m
                            
                            # Ch·∫∑n Alt+F4
                            if vk_code == VK_F4 and win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                                print("üö´ Ch·∫∑n Alt+F4 b·∫±ng Windows API")
                                return 1
                            
                            # Ch·∫∑n Alt+Tab
                            if vk_code == VK_TAB and win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                                print("üö´ Ch·∫∑n Alt+Tab b·∫±ng Windows API")
                                return 1
                            
                            # Ch·∫∑n Ctrl+Alt+Del
                            if vk_code == VK_DELETE:
                                if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                                    win32api.GetAsyncKeyState(VK_MENU) & 0x8000):
                                    print("üö´ Ch·∫∑n Ctrl+Alt+Del b·∫±ng Windows API")
                                    return 1
                            
                            # Ch·∫∑n Ctrl+Shift+Esc
                            if vk_code == VK_ESCAPE:
                                if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                                    win32api.GetAsyncKeyState(VK_SHIFT) & 0x8000):
                                    print("üö´ Ch·∫∑n Ctrl+Shift+Esc b·∫±ng Windows API")
                                    return 1
                                
                        except Exception as e:
                            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m trong hook: {e}")
                
                # G·ªçi hook ti·∫øp theo - s·ª≠a l·ªói ki·ªÉu d·ªØ li·ªáu
                try:
                    return ctypes.windll.user32.CallNextHookEx(None, nCode, wParam, lParam)
                except:
                    return 0
            
            # ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho callback
            HOOKPROC = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_uint, ctypes.POINTER(ctypes.c_void_p))
            
            # T·∫°o callback function v·ªõi ƒë√∫ng ki·ªÉu
            self.keyboard_proc = HOOKPROC(keyboard_proc)
            
            # L·∫•y module handle c·ªßa process hi·ªán t·∫°i
            current_pid = os.getpid()
            module_handle = ctypes.windll.kernel32.GetModuleHandleW(None)
            
            print(f"üîç Process ID: {current_pid}")
            print(f"üîç Module Handle: {module_handle}")
            
            # C√†i ƒë·∫∑t hook v·ªõi ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
            self.hook_id = ctypes.windll.user32.SetWindowsHookExA(
                WH_KEYBOARD_LL,
                self.keyboard_proc,
                module_handle,
                0
            )
            
            if self.hook_id:
                print("‚úÖ Windows API keyboard hook ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!")
                print(f"   Hook ID: {self.hook_id}")
            else:
                print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Windows API keyboard hook")
                error_code = ctypes.windll.kernel32.GetLastError()
                print(f"   Error code: {error_code}")
                
                # Th·ª≠ c√°ch kh√°c - s·ª≠ d·ª•ng hook ƒë∆°n gi·∫£n h∆°n
                print("üîÑ Th·ª≠ c√°ch kh√°c - s·ª≠ d·ª•ng hook ƒë∆°n gi·∫£n...")
                try:
                    self.hook_id = ctypes.windll.user32.SetWindowsHookExA(
                        WH_KEYBOARD_LL,
                        self.keyboard_proc,
                        None,  # S·ª≠ d·ª•ng None thay v√¨ module handle
                        0
                    )
                    
                    if self.hook_id:
                        print("‚úÖ Windows API keyboard hook ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng (c√°ch 2)!")
                        print(f"   Hook ID: {self.hook_id}")
                    else:
                        print("‚ùå V·∫´n kh√¥ng th·ªÉ c√†i ƒë·∫∑t hook")
                        error_code = ctypes.windll.kernel32.GetLastError()
                        print(f"   Error code: {error_code}")
                        
                except Exception as e2:
                    print(f"‚ùå L·ªói khi th·ª≠ c√°ch 2: {e2}")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi c√†i ƒë·∫∑t Windows API hook: {e}")
            import traceback
            traceback.print_exc()
    
    def start_keyboard_hook(self):
        """Kh·ªüi ƒë·ªông hook b√†n ph√≠m pynput"""
        try:
            self.keyboard_listener = keyboard.Listener(
                on_press=self.on_key_press,
                on_release=self.on_key_release,
                suppress=True  # Ch·∫∑n ho√†n to√†n c√°c ph√≠m
            )
            self.keyboard_listener.start()
            print("‚úÖ Pynput keyboard hook ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!")
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông pynput keyboard hook: {e}")
    
    def on_key_press(self, key):
        """X·ª≠ l√Ω khi nh·∫•n ph√≠m"""
        try:
            # Cho ph√©p c√°c ph√≠m c·∫ßn thi·∫øt cho nh·∫≠p m·∫≠t kh·∫©u
            if self.is_allowed_key(key):
                return True
            
            # Ch·∫∑n t·∫•t c·∫£ c√°c ph√≠m kh√°c
            return False
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m: {e}")
            return False
    
    def on_key_release(self, key):
        """X·ª≠ l√Ω khi th·∫£ ph√≠m"""
        pass
    
    def is_allowed_key(self, key):
        """Ki·ªÉm tra xem c√≥ ph·∫£i ph√≠m ƒë∆∞·ª£c ph√©p kh√¥ng"""
        # Cho ph√©p c√°c ph√≠m ch·ªØ v√† s·ªë
        if hasattr(key, 'char') and key.char:
            return True
        
        # Cho ph√©p c√°c ph√≠m ƒëi·ªÅu h∆∞·ªõng c∆° b·∫£n
        allowed_keys = [
            Key.backspace, Key.delete, Key.left, Key.right, 
            Key.up, Key.down, Key.home, Key.end, Key.enter,
            Key.tab, Key.space
        ]
        
        if key in allowed_keys:
            return True
        
        return False
    
    def monitor_system_keys(self):
        """Gi√°m s√°t v√† ch·∫∑n ph√≠m t·∫Øt h·ªá th·ªëng (backup m·∫°nh h∆°n)"""
        while self.running:
            try:
                # Ch·∫∑n Alt+Tab - c·∫£i thi·ªán
                if win32api.GetAsyncKeyState(VK_TAB) & 0x8000:
                    if win32api.GetAsyncKeyState(VK_MENU) & 0x8000:  # Alt key
                        print("üö´ Ch·∫∑n Alt+Tab (backup m·∫°nh)")
                        # Ch·∫∑n li√™n t·ª•c ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng th·ªÉ bypass
                        time.sleep(0.001)  # Delay c·ª±c nh·ªè ƒë·ªÉ ch·∫∑n tri·ªát ƒë·ªÉ
                        continue
                
                # Ch·∫∑n Alt+F4 - c·∫£i thi·ªán
                if win32api.GetAsyncKeyState(VK_F4) & 0x8000:
                    if win32api.GetAsyncKeyState(VK_MENU) & 0x8000:  # Alt key
                        print("üö´ Ch·∫∑n Alt+F4 (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n Windows key - c·∫£i thi·ªán
                if win32api.GetAsyncKeyState(VK_LWIN) & 0x8000 or \
                   win32api.GetAsyncKeyState(VK_RWIN) & 0x8000:
                    print("üö´ Ch·∫∑n Windows key (backup m·∫°nh)")
                    time.sleep(0.001)
                    continue
                
                # Ch·∫∑n Ctrl+Alt+Del - c·∫£i thi·ªán
                if win32api.GetAsyncKeyState(VK_DELETE) & 0x8000:
                    if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                        win32api.GetAsyncKeyState(VK_MENU) & 0x8000):
                        print("üö´ Ch·∫∑n Ctrl+Alt+Del (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n Ctrl+Shift+Esc - c·∫£i thi·ªán
                if win32api.GetAsyncKeyState(VK_ESCAPE) & 0x8000:
                    if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                        win32api.GetAsyncKeyState(VK_SHIFT) & 0x8000):
                        print("üö´ Ch·∫∑n Ctrl+Shift+Esc (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n th√™m c√°c ph√≠m t·∫Øt kh√°c
                # Ch·∫∑n Alt+Space (menu c·ª≠a s·ªï)
                if win32api.GetAsyncKeyState(0x20) & 0x8000:  # Space key
                    if win32api.GetAsyncKeyState(VK_MENU) & 0x8000:  # Alt key
                        print("üö´ Ch·∫∑n Alt+Space (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n F11 (fullscreen)
                if win32api.GetAsyncKeyState(0x7A) & 0x8000:  # F11 key
                    print("üö´ Ch·∫∑n F11 (backup m·∫°nh)")
                    time.sleep(0.001)
                    continue
                
                # Ch·∫∑n Ctrl+W (ƒë√≥ng tab/c·ª≠a s·ªï)
                if win32api.GetAsyncKeyState(0x57) & 0x8000:  # W key
                    if win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000:
                        print("üö´ Ch·∫∑n Ctrl+W (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n Ctrl+Q (tho√°t ·ª©ng d·ª•ng)
                if win32api.GetAsyncKeyState(0x51) & 0x8000:  # Q key
                    if win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000:
                        print("üö´ Ch·∫∑n Ctrl+Q (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                # Ch·∫∑n Ctrl+Shift+N (t·∫°o m·ªõi)
                if win32api.GetAsyncKeyState(0x4E) & 0x8000:  # N key
                    if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                        win32api.GetAsyncKeyState(VK_SHIFT) & 0x8000):
                        print("üö´ Ch·∫∑n Ctrl+Shift+N (backup m·∫°nh)")
                        time.sleep(0.001)
                        continue
                
                time.sleep(0.001)  # Delay c·ª±c nh·ªè ƒë·ªÉ ch·∫∑n tri·ªát ƒë·ªÉ
                
            except Exception as e:
                print(f"‚ùå L·ªói gi√°m s√°t ph√≠m: {e}")
                time.sleep(0.1)
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        print("üö´ C·ªë g·∫Øng ƒë√≥ng c·ª≠a s·ªï - b·ªã ch·∫∑n!")
        return "break"  # NgƒÉn kh√¥ng cho ƒë√≥ng
    
    def on_password_focus_in(self, event):
        """Khi focus v√†o √¥ m·∫≠t kh·∫©u"""
        print("‚úÖ Focus v√†o √¥ m·∫≠t kh·∫©u - cho ph√©p nh·∫≠p li·ªáu")
    
    def on_password_focus_out(self, event):
        """Khi kh√¥ng focus v√†o √¥ m·∫≠t kh·∫©u"""
        print("üîí Kh√¥ng focus v√†o √¥ m·∫≠t kh·∫©u - b·∫≠t hook b·∫£o v·ªá")
    
    def check_password(self):
        """Ki·ªÉm tra m·∫≠t kh·∫©u"""
        entered_password = self.password_entry.get()
        
        if entered_password == self.correct_password:
            messagebox.showinfo("Th√†nh c√¥ng", "M·∫≠t kh·∫©u ƒë√∫ng! M√†n h√¨nh s·∫Ω ƒë∆∞·ª£c m·ªü kh√≥a.")
            self.unlock_screen()
        else:
            self.attempts += 1
            remaining_attempts = self.max_attempts - self.attempts
            
            if remaining_attempts > 0:
                messagebox.showerror("L·ªói", f"M·∫≠t kh·∫©u sai! C√≤n {remaining_attempts} l·∫ßn th·ª≠.")
                self.password_entry.delete(0, tk.END)
                self.password_entry.focus()
            else:
                messagebox.showerror("L·ªói", "ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ cho ph√©p!")
                self.password_entry.delete(0, tk.END)
                self.attempts = 0  # Reset s·ªë l·∫ßn th·ª≠
    
    def unlock_screen(self):
        """M·ªü kh√≥a m√†n h√¨nh"""
        print("üîì M·ªü kh√≥a m√†n h√¨nh...")
        self.running = False
        if self.keyboard_listener:
            self.keyboard_listener.stop()
        if hasattr(self, 'hook_id') and self.hook_id:
            ctypes.windll.user32.UnhookWindowsHookEx(self.hook_id)
        self.root.destroy()
        sys.exit()
    
    def exit_app(self):
        """Tho√°t ·ª©ng d·ª•ng"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?"):
            print("üö™ Tho√°t ·ª©ng d·ª•ng...")
            self.running = False
            if self.keyboard_listener:
                self.keyboard_listener.stop()
            if hasattr(self, 'hook_id') and self.hook_id:
                ctypes.windll.user32.UnhookWindowsHookEx(self.hook_id)
            self.root.destroy()
            sys.exit()
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("üõë Nh·∫≠n t√≠n hi·ªáu tho√°t...")
            self.running = False
            if self.keyboard_listener:
                self.keyboard_listener.stop()
            if hasattr(self, 'hook_id') and self.hook_id:
                ctypes.windll.user32.UnhookWindowsHookEx(self.hook_id)
            self.root.destroy()
            sys.exit()

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Kh·ªüi ƒë·ªông Screen Protector...")
    print("üîë M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: 123456")
    print("‚å®Ô∏è  Nh·∫•n Ctrl+C ƒë·ªÉ tho√°t")
    print("üõ°Ô∏è  ƒê√£ b·∫≠t ch·∫ø ƒë·ªô b·∫£o v·ªá ch·∫∑n ph√≠m t·∫Øt h·ªá th·ªëng!")
    print("=" * 50)
    
    # T·∫°o v√† ch·∫°y ·ª©ng d·ª•ng
    app = ScreenProtector()
    app.run()

if __name__ == "__main__":
    main()
