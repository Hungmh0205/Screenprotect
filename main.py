import pygame
import time
import threading
import sys
import os
import argparse
from pynput import keyboard
from pynput.keyboard import Key, KeyCode
import win32api
import ctypes
from ctypes import wintypes
from PIL import Image

# Windows API constants
WH_KEYBOARD_LL = 13
WM_KEYDOWN = 0x0100
WM_SYSKEYDOWN = 0x0104

# Key codes
VK_LWIN = 0x5B
VK_RWIN = 0x5C
VK_TAB = 0x09
VK_F4 = 0x73
VK_MENU = 0x12  # Alt key
VK_CONTROL = 0x11
VK_SHIFT = 0x10
VK_DELETE = 0x2E
VK_ESCAPE = 0x1B

def resource_path(relative_path):
    """
    L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn resource, d√πng cho c·∫£ khi ch·∫°y script v√† khi ƒë√≥ng g√≥i exe.
    """
    try:
        # PyInstaller t·∫°o bi·∫øn _MEIPASS khi ch·∫°y exe
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

def find_vietnamese_font(preferred_fonts=None):
    """
    T√¨m font h·ªó tr·ª£ ti·∫øng Vi·ªát tr√™n h·ªá th·ªëng.
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n font ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    import sys
    import os

    if preferred_fonts is None:
        # Arial, Segoe UI, Tahoma, DejaVu Sans ƒë·ªÅu h·ªó tr·ª£ Unicode t·ªët
        preferred_fonts = [
            "arial.ttf", "Arial.ttf", "Arial Unicode.ttf", "arialuni.ttf",
            "segoeui.ttf", "SegoeUI.ttf", "tahoma.ttf", "Tahoma.ttf",
            "DejaVuSans.ttf", "dejavusans.ttf", "times.ttf", "Times.ttf"
        ]

    # C√°c th∆∞ m·ª•c font ph·ªï bi·∫øn tr√™n Windows
    font_dirs = [
        os.path.join(os.environ.get("WINDIR", "C:\\Windows"), "Fonts"),
        "/usr/share/fonts/truetype",
        "/usr/share/fonts",
        "/usr/local/share/fonts",
        os.path.expanduser("~/.fonts"),
    ]

    for font_dir in font_dirs:
        if not os.path.isdir(font_dir):
            continue
        for font_name in preferred_fonts:
            font_path = os.path.join(font_dir, font_name)
            if os.path.isfile(font_path):
                return font_path
    # N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ None
    return None

class PygameScreenProtector:
    def __init__(self, custom_message="", temp_password=None):
        pygame.init()
        
        # Thi·∫øt l·∫≠p m√†n h√¨nh fullscreen
        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        self.width, self.height = self.screen.get_size()
        
        # Thi·∫øt l·∫≠p transparency cho c·ª≠a s·ªï
        self.set_window_transparency()
        
        # M√†u s·∫Øc
        self.WHITE = (255, 255, 255)
        self.BLACK = (0, 0, 0)
        self.TRANSPARENT = (0, 0, 0, 0)
        self.BLUE = (135, 206, 235)
        self.DARK_BLUE = (0, 25, 100)
        
        # Font: ∆Øu ti√™n font h·ªó tr·ª£ ti·∫øng Vi·ªát
        self.viet_font_path = find_vietnamese_font()
        if self.viet_font_path:
            try:
                # Gi·∫£m size m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh tr√†n frame, nh∆∞ng s·∫Ω t·ª± ƒë·ªông co l·∫°i ·ªü draw_clock
                self.clock_font = pygame.font.Font(self.viet_font_path, 120)
                self.date_font = pygame.font.Font(self.viet_font_path, 60)
                self.password_font = pygame.font.Font(self.viet_font_path, 48)
                self.message_font = pygame.font.Font(self.viet_font_path, 36)
                print(f"‚úÖ ƒê√£ s·ª≠ d·ª•ng font h·ªó tr·ª£ ti·∫øng Vi·ªát: {self.viet_font_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load font ti·∫øng Vi·ªát ({self.viet_font_path}), d√πng font m·∫∑c ƒë·ªãnh. L·ªói: {e}")
                self.clock_font = pygame.font.Font(None, 120)
                self.date_font = pygame.font.Font(None, 60)
                self.password_font = pygame.font.Font(None, 48)
                self.message_font = pygame.font.Font(None, 36)
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y font ti·∫øng Vi·ªát, d√πng font m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ l·ªói d·∫•u).")
            self.clock_font = pygame.font.Font(None, 120)
            self.date_font = pygame.font.Font(None, 60)
            self.password_font = pygame.font.Font(None, 48)
            self.message_font = pygame.font.Font(None, 36)
        
        # Custom message
        self.custom_message = custom_message
        
        # T·∫°o surface trong su·ªët cho UI
        self.ui_surface = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
        
        # M·∫≠t kh·∫©u: s·ª≠ d·ª•ng temp_password n·∫øu c√≥, kh√¥ng th√¨ d√πng m·∫∑c ƒë·ªãnh
        self.correct_password = temp_password if temp_password else "123456"
        self.password = ""
        self.show_password = False
        self.attempts = 0
        self.max_attempts = 3

        # Hi·ªáu ·ª©ng fade v√† clock move
        self.fade_alpha = 0  # 0-102 (0-40%)
        self.fade_target = 0
        self.clock_y = self.height // 2 - 100
        self.clock_y_target = self.clock_y
        self.clock_move_speed = 18  # px m·ªói frame, ƒëi·ªÅu ch·ªânh cho m∆∞·ª£t
        
        # Kh·ªüi t·∫°o modifier keys tracking
        self._alt_pressed = False
        self._ctrl_pressed = False
        self._shift_pressed = False
        
        # Kh·ªüi ƒë·ªông c√°c hook
        self.running = True
        self.start_windows_hook()  # B·∫≠t l·∫°i Windows API hook
        self.start_keyboard_hook()
        self.start_system_monitor()
        
        # T·∫£i background image
        self.background_image = self.load_background_image()
        
        print("‚úÖ Pygame Screen Protector ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
        print(f"üì± K√≠ch th∆∞·ªõc m√†n h√¨nh: {self.width}x{self.height}")
        if self.custom_message:
            print(f"üí¨ Custom message: {self.custom_message}")
        if temp_password:
            print(f"üîë S·ª≠ d·ª•ng m·∫≠t kh·∫©u t·∫°m th·ªùi: {temp_password}")
        else:
            print(f"üîë S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: {self.correct_password}")
        
    def set_window_transparency(self):
        """Thi·∫øt l·∫≠p transparency cho c·ª≠a s·ªï Pygame"""
        # Kh√¥ng c·∫ßn thi·∫øt l·∫≠p transparency cho to√†n b·ªô c·ª≠a s·ªï
        # Ch·ªâ UI elements s·∫Ω c√≥ transparency
        pass
    
    def load_background_image(self):
        """T·∫£i background image"""
        try:
            # S·ª≠ d·ª•ng resource_path ƒë·ªÉ l·∫•y ƒë√∫ng ƒë∆∞·ªùng d·∫´n khi build exe
            img_path = resource_path("wallpaper.jpg")
            if os.path.exists(img_path):
                # T·∫£i v√† resize image
                pil_image = Image.open(img_path)
                pil_image = pil_image.resize((self.width, self.height), Image.Resampling.LANCZOS)
                
                # Chuy·ªÉn sang Pygame surface
                mode = pil_image.mode
                size = pil_image.size
                data = pil_image.tobytes()
                
                pygame_image = pygame.image.fromstring(data, size, mode)
                print(f"‚úÖ ƒê√£ t·∫£i background image: {img_path}")
                return pygame_image
            else:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {img_path}, s·ª≠ d·ª•ng gradient")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i background: {e}")
            return None
    
    def create_gradient_background(self):
        """T·∫°o gradient background ƒë·∫πp"""
        gradient_surface = pygame.Surface((self.width, self.height))
        
        for y in range(self.height):
            ratio = y / self.height
            if ratio < 0.5:  # N·ª≠a tr√™n - xanh tr·ªùi
                r = int(135 + (200 - 135) * (ratio * 2))
                g = int(206 + (230 - 206) * (ratio * 2))
                b = int(235 + (255 - 235) * (ratio * 2))
            else:  # N·ª≠a d∆∞·ªõi - xanh bi·ªÉn s√¢u
                r = int(0 + (25 - 0) * ((ratio - 0.5) * 2))
                g = int(25 + (50 - 25) * ((ratio - 0.5) * 2))
                b = int(100 + (150 - 100) * ((ratio - 0.5) * 2))
            
            pygame.draw.line(gradient_surface, (r, g, b), (0, y), (self.width, y))
        
        return gradient_surface
    
    def create_glass_effect(self, x, y, width, height, alpha=100, color=(255, 255, 255)):
        """T·∫°o hi·ªáu ·ª©ng glass morphism v·ªõi transparency th·ª±c s·ª±"""
        glass_surface = pygame.Surface((width, height), pygame.SRCALPHA)
        
        # T·∫°o n·ªÅn trong su·ªët v·ªõi ƒë·ªô m·ªù nh·∫π
        # S·ª≠ d·ª•ng alpha th·∫•p ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng trong su·ªët
        glass_color = (*color, alpha)
        pygame.draw.rect(glass_surface, glass_color, (0, 0, width, height), border_radius=20)
        
        # Th√™m vi·ªÅn trong su·ªët ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng glass
        border_color = (*color, alpha // 2)
        pygame.draw.rect(glass_surface, border_color, (0, 0, width, height), width=2, border_radius=20)
        
        return glass_surface

    def draw_fade_overlay(self):
        """V·∫Ω l·ªõp fade m·ªù l√™n background khi show_password"""
        if self.fade_alpha > 0:
            fade_surface = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            fade_surface.fill((0, 0, 0, self.fade_alpha))
            self.screen.blit(fade_surface, (0, 0))

    def _render_text_fit(self, font, text, max_width, color, min_font_size=12, max_height=None):
        """
        Render text to fit within max_width (and optionally max_height). 
        If too long, shrink font size or truncate with ellipsis.
        Returns: (surface, used_font)
        """
        # Try to shrink font size if possible
        font_size = font.get_height()
        orig_font_path = font.get_name() if hasattr(font, "get_name") else None
        while font_size >= min_font_size:
            test_font = pygame.font.Font(self.viet_font_path if self.viet_font_path else None, font_size)
            text_surface = test_font.render(text, True, color)
            if text_surface.get_width() <= max_width and (max_height is None or text_surface.get_height() <= max_height):
                return text_surface, test_font
            font_size -= 2
        # If still too long, truncate and add ellipsis
        test_font = pygame.font.Font(self.viet_font_path if self.viet_font_path else None, min_font_size)
        ellipsis = "..."
        max_text = text
        while len(max_text) > 0:
            test_surface = test_font.render(max_text + ellipsis, True, color)
            if test_surface.get_width() <= max_width and (max_height is None or test_surface.get_height() <= max_height):
                return test_surface, test_font
            max_text = max_text[:-1]
        # Fallback: just render ellipsis
        return test_font.render(ellipsis, True, color), test_font

    def draw_clock(self):
        """V·∫Ω ƒë·ªìng h·ªì v·ªõi n·ªÅn trong su·ªët, t·ª± ƒë·ªông co ch·ªØ cho v·ª´a frame"""
        current_time = time.strftime("%H:%M")
        current_date = time.strftime("%A, %B %d")
        
        # X√≥a surface c≈©
        self.ui_surface.fill(self.TRANSPARENT)
        
        # T·∫°o hi·ªáu ·ª©ng glass cho ƒë·ªìng h·ªì - n·ªÅn trong su·ªët
        glass_width = 500
        glass_height = 250
        clock_glass = self.create_glass_effect(0, 0, glass_width, glass_height, 40, (255, 255, 255))
        clock_rect = clock_glass.get_rect(center=(self.width//2, int(self.clock_y)))
        
        # T·ª± ƒë·ªông fit text cho v·ª´a frame
        # Th·ªùi gian: chi·∫øm t·ªëi ƒëa 90% width, 40% height
        max_time_width = int(glass_width * 0.9)
        max_time_height = int(glass_height * 0.4)
        time_surface, time_font = self._render_text_fit(self.clock_font, current_time, max_time_width, self.WHITE, min_font_size=36, max_height=max_time_height)
        time_rect = time_surface.get_rect(center=(glass_width//2, 100))
        
        # Ng√†y: chi·∫øm t·ªëi ƒëa 90% width, 20% height
        max_date_width = int(glass_width * 0.9)
        max_date_height = int(glass_height * 0.2)
        date_surface, date_font = self._render_text_fit(self.date_font, current_date, max_date_width, self.WHITE, min_font_size=20, max_height=max_date_height)
        date_rect = date_surface.get_rect(center=(glass_width//2, 170))
        
        clock_glass.blit(time_surface, time_rect)
        clock_glass.blit(date_surface, date_rect)
        
        # V·∫Ω custom message n·∫øu c√≥, x·ª≠ l√Ω qu√° d√†i
        if self.custom_message:
            # Gi·ªõi h·∫°n chi·ªÅu r·ªông message l√† 90% glass_width, t·ªëi ƒëa 20% chi·ªÅu cao
            max_msg_width = int(glass_width * 0.9)
            max_msg_height = int(glass_height * 0.2)
            msg_surface, msg_font = self._render_text_fit(self.message_font, self.custom_message, max_msg_width, self.WHITE, min_font_size=16, max_height=max_msg_height)
            msg_rect = msg_surface.get_rect(center=(glass_width//2, 220))
            clock_glass.blit(msg_surface, msg_rect)
        
        # V·∫Ω glass l√™n UI surface
        self.ui_surface.blit(clock_glass, clock_rect)
        
        # V·∫Ω password field n·∫øu c·∫ßn
        if self.show_password or self.fade_alpha > 0:
            self.draw_password_field()
    
    def draw_password_field(self):
        """V·∫Ω √¥ m·∫≠t kh·∫©u v·ªõi n·ªÅn trong su·ªët"""
        # K√≠ch th∆∞·ªõc nh·ªè h∆°n, gi·ªëng m√†n h√¨nh lock c·ªßa Windows
        pw_width = 280
        pw_height = 60
        pw_glass = self.create_glass_effect(0, 0, pw_width, pw_height, 80, (0, 0, 0))
        pw_rect = pw_glass.get_rect(center=(self.width//2, self.height//2 + 150))
        
        # V·∫Ω password (d·∫•u *)
        password_display = "*" * len(self.password)
        # Font nh·ªè h∆°n cho ph√π h·ª£p v·ªõi √¥ nh·ªè
        pw_text = self.password_font.render(password_display, True, self.WHITE)
        pw_text_rect = pw_text.get_rect(center=(pw_width//2, pw_height//2))
        pw_glass.blit(pw_text, pw_text_rect)
        
        # V·∫Ω glass l√™n UI surface
        self.ui_surface.blit(pw_glass, pw_rect)
    
    def run(self):
        """V√≤ng l·∫∑p ch√≠nh"""
        clock = pygame.time.Clock()
        # Hi·ªáu ·ª©ng fade v√† clock move
        FADE_MAX = int(255 * 0.4)  # 40% alpha ~ 102
        CLOCK_Y_NORMAL = self.height // 2 - 100
        CLOCK_Y_UP = self.height // 2 - 220  # Di chuy·ªÉn l√™n tr√™n
        
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.KEYDOWN:
                    self.handle_keydown(event)
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    # Khi click chu·ªôt, show_password = True, fade l√™n, clock move l√™n
                    if not self.show_password:
                        self.show_password = True
                        self.fade_target = FADE_MAX
                        self.clock_y_target = CLOCK_Y_UP
                        print("üîì Hi·ªán √¥ m·∫≠t kh·∫©u - hi·ªáu ·ª©ng fade v√† ƒë·ªìng h·ªì di chuy·ªÉn l√™n")
                    else:
                        self.show_password = False
                        self.fade_target = 0
                        self.clock_y_target = CLOCK_Y_NORMAL
                        print("üîí ·∫®n √¥ m·∫≠t kh·∫©u - hi·ªáu ·ª©ng fade bi·∫øn m·∫•t, ƒë·ªìng h·ªì v·ªÅ v·ªã tr√≠ c≈©")
                elif event.type == pygame.KEYUP:
                    if event.key == pygame.K_ESCAPE:
                        if self.show_password:
                            self.show_password = False
                            self.fade_target = 0
                            self.clock_y_target = CLOCK_Y_NORMAL
                            print("üîí ·∫®n √¥ m·∫≠t kh·∫©u")
            
            # C·∫≠p nh·∫≠t hi·ªáu ·ª©ng fade alpha
            if self.fade_alpha < self.fade_target:
                self.fade_alpha = min(self.fade_alpha + 10, self.fade_target)
            elif self.fade_alpha > self.fade_target:
                self.fade_alpha = max(self.fade_alpha - 10, self.fade_target)
            
            # C·∫≠p nh·∫≠t v·ªã tr√≠ ƒë·ªìng h·ªì m∆∞·ª£t m√†
            if self.clock_y < self.clock_y_target:
                self.clock_y = min(self.clock_y + self.clock_move_speed, self.clock_y_target)
            elif self.clock_y > self.clock_y_target:
                self.clock_y = max(self.clock_y - self.clock_move_speed, self.clock_y_target)
            
            # V·∫Ω background
            if self.background_image:
                self.screen.blit(self.background_image, (0, 0))
            else:
                gradient = self.create_gradient_background()
                self.screen.blit(gradient, (0, 0))
            
            # V·∫Ω l·ªõp fade n·∫øu c·∫ßn
            self.draw_fade_overlay()
            
            # V·∫Ω UI v·ªõi transparency
            self.draw_clock()
            self.screen.blit(self.ui_surface, (0, 0))
            
            pygame.display.flip()
            clock.tick(60)
        
        # Tho√°t m∆∞·ª£t m√†
        print("üîÑ ƒêang ƒë√≥ng Pygame...")
        pygame.quit()
        print("‚úÖ ·ª®ng d·ª•ng ƒë√£ tho√°t th√†nh c√¥ng!")
        # Kh√¥ng g·ªçi sys.exit() ƒë·ªÉ tr√°nh "refresh" m√†n h√¨nh
    
    def handle_keydown(self, event):
        """X·ª≠ l√Ω ph√≠m nh·∫•n"""
        # Ch·ªâ x·ª≠ l√Ω nh·∫≠p m·∫≠t kh·∫©u khi √¥ m·∫≠t kh·∫©u ƒëang hi·ªÉn th·ªã
        if not self.show_password:
            return
            
        if event.key == pygame.K_RETURN:
            self.check_password()
        elif event.key == pygame.K_BACKSPACE:
            self.password = self.password[:-1]
        elif event.unicode.isprintable():
            if len(self.password) < 20:  # Gi·ªõi h·∫°n ƒë·ªô d√†i
                self.password += event.unicode
    
    def check_password(self):
        """Ki·ªÉm tra m·∫≠t kh·∫©u"""
        if self.password == self.correct_password:
            print("‚úÖ M·∫≠t kh·∫©u ƒë√∫ng! M·ªü kh√≥a m√†n h√¨nh...")
            self.unlock_screen()
        else:
            self.attempts += 1
            remaining_attempts = self.max_attempts - self.attempts
            
            if remaining_attempts > 0:
                print(f"‚ùå M·∫≠t kh·∫©u sai! C√≤n {remaining_attempts} l·∫ßn th·ª≠.")
            else:
                print("‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ cho ph√©p!")
                self.attempts = 0
            
            self.password = ""
    
    def unlock_screen(self):
        """M·ªü kh√≥a m√†n h√¨nh"""
        print("üîì M·ªü kh√≥a m√†n h√¨nh...")
        
        # D·ª´ng c√°c hook
        if hasattr(self, 'keyboard_listener') and self.keyboard_listener:
            self.keyboard_listener.stop()
        if hasattr(self, 'hook_id') and self.hook_id:
            ctypes.windll.user32.UnhookWindowsHookEx(self.hook_id)
        
        # Tho√°t m∆∞·ª£t m√† - kh√¥ng g·ªçi iconify ƒë·ªÉ tr√°nh "refresh" m√†n h√¨nh
        print("üîÑ ƒêang tho√°t ·ª©ng d·ª•ng...")
        self.running = False
    
    def start_windows_hook(self):
        """Kh·ªüi ƒë·ªông Windows API keyboard hook"""
        try:
            def keyboard_proc(nCode, wParam, lParam):
                if nCode >= 0:
                    if wParam == WM_KEYDOWN or wParam == WM_SYSKEYDOWN:
                        try:
                            vk_code = ctypes.cast(lParam, ctypes.POINTER(ctypes.c_ulong)).contents.value & 0xFF
                            
                            # Ch·∫∑n Windows key
                            if vk_code in [VK_LWIN, VK_RWIN]:
                                print("üö´ Ch·∫∑n Windows key b·∫±ng Windows API")
                                return 1
                            
                            # Ch·∫∑n Alt+F4
                            if vk_code == VK_F4 and win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                                print("üö´ Ch·∫∑n Alt+F4 b·∫±ng Windows API")
                                return 1
                            
                            # Ch·∫∑n Alt+Tab
                            if vk_code == VK_TAB and win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                                print("üö´ Ch·∫∑n Alt+Tab b·∫±ng Windows API")
                                return 1
                            
                            # Ch·∫∑n Ctrl+Alt+Del
                            if vk_code == VK_DELETE:
                                if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                                    win32api.GetAsyncKeyState(VK_MENU) & 0x8000):
                                    print("üö´ Ch·∫∑n Ctrl+Alt+Del b·∫±ng Windows API")
                                    return 1
                            
                            # Ch·∫∑n Ctrl+Shift+Esc
                            if vk_code == VK_ESCAPE:
                                if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                                    win32api.GetAsyncKeyState(VK_SHIFT) & 0x8000):
                                    print("üö´ Ch·∫∑n Ctrl+Shift+Esc b·∫±ng Windows API")
                                    return 1
                                
                        except Exception as e:
                            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m trong hook: {e}")
                
                try:
                    return ctypes.windll.user32.CallNextHookEx(None, nCode, wParam, lParam)
                except:
                    return 0
            
            HOOKPROC = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_uint, ctypes.POINTER(ctypes.c_void_p))
            self.keyboard_proc = HOOKPROC(keyboard_proc)
            
            # Th·ª≠ nhi·ªÅu c√°ch ƒë·ªÉ c√†i ƒë·∫∑t hook
            module_handle = ctypes.windll.kernel32.GetModuleHandleW(None)
            self.hook_id = ctypes.windll.user32.SetWindowsHookExA(
                WH_KEYBOARD_LL,
                self.keyboard_proc,
                module_handle,
                0
            )
            
            if self.hook_id:
                print("‚úÖ Windows API keyboard hook ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!")
                print(f"   Hook ID: {self.hook_id}")
            else:
                print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Windows API keyboard hook")
                error_code = ctypes.windll.kernel32.GetLastError()
                print(f"   Error code: {error_code}")
                
                # Th·ª≠ c√°ch kh√°c - s·ª≠ d·ª•ng None cho module handle
                print("üîÑ Th·ª≠ c√°ch kh√°c - s·ª≠ d·ª•ng None cho module handle...")
                try:
                    self.hook_id = ctypes.windll.user32.SetWindowsHookExA(
                        WH_KEYBOARD_LL,
                        self.keyboard_proc,
                        None,  # S·ª≠ d·ª•ng None thay v√¨ module handle
                        0
                    )
                    
                    if self.hook_id:
                        print("‚úÖ Windows API keyboard hook ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng (c√°ch 2)!")
                        print(f"   Hook ID: {self.hook_id}")
                    else:
                        print("‚ùå V·∫´n kh√¥ng th·ªÉ c√†i ƒë·∫∑t hook")
                        error_code = ctypes.windll.kernel32.GetLastError()
                        print(f"   Error code: {error_code}")
                        
                except Exception as e2:
                    print(f"‚ùå L·ªói khi th·ª≠ c√°ch 2: {e2}")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi c√†i ƒë·∫∑t Windows API hook: {e}")
            import traceback
            traceback.print_exc()
    
    def start_keyboard_hook(self):
        """Kh·ªüi ƒë·ªông hook b√†n ph√≠m pynput (backup)"""
        try:
            self.keyboard_listener = keyboard.Listener(
                on_press=self.on_key_press,
                on_release=self.on_key_release,
                suppress=False  # Kh√¥ng suppress ƒë·ªÉ Windows API hook l√†m vi·ªác ch√≠nh
            )
            self.keyboard_listener.start()
            print("‚úÖ Pynput keyboard hook ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông (backup)!")
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông pynput keyboard hook: {e}")
    
    def on_key_press(self, key):
        """X·ª≠ l√Ω khi nh·∫•n ph√≠m"""
        try:
            # Ch·ªâ cho ph√©p nh·∫≠p m·∫≠t kh·∫©u khi √¥ m·∫≠t kh·∫©u ƒëang hi·ªÉn th·ªã
            if not self.show_password:
                return False

            # Ch·∫∑n c√°c ph√≠m t·∫Øt h·ªá th·ªëng nguy hi·ªÉm
            if self.is_dangerous_key_combination(key):
                print(f"üö´ Ch·∫∑n ph√≠m t·∫Øt h·ªá th·ªëng: {key}")
                return False
            
            # Cho ph√©p c√°c ph√≠m c·∫ßn thi·∫øt cho nh·∫≠p m·∫≠t kh·∫©u
            if self.is_allowed_key(key):
                return True
            
            # Ch·∫∑n t·∫•t c·∫£ c√°c ph√≠m kh√°c
            return False
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m: {e}")
            return False
    
    def is_dangerous_key_combination(self, key):
        """Ki·ªÉm tra xem c√≥ ph·∫£i ph√≠m t·∫Øt h·ªá th·ªëng nguy hi·ªÉm kh√¥ng"""
        # Ch·∫∑n Windows key
        if key == Key.cmd or key == Key.cmd_r:
            return True
        
        # Ch·∫∑n Alt+F4
        if hasattr(self, '_alt_pressed') and self._alt_pressed and key == Key.f4:
            return True
        
        # Ch·∫∑n Alt+Tab
        if hasattr(self, '_alt_pressed') and self._alt_pressed and key == Key.tab:
            return True
        
        # Ch·∫∑n Ctrl+Alt+Del
        if hasattr(self, '_ctrl_pressed') and self._ctrl_pressed and \
           hasattr(self, '_alt_pressed') and self._alt_pressed and key == Key.delete:
            return True
        
        # Ch·∫∑n Ctrl+Shift+Esc
        if hasattr(self, '_ctrl_pressed') and self._ctrl_pressed and \
           hasattr(self, '_shift_pressed') and self._shift_pressed and key == Key.esc:
            return True
        
        return False
    
    def on_key_release(self, key):
        """X·ª≠ l√Ω khi th·∫£ ph√≠m"""
        try:
            # Theo d√µi modifier keys ƒë·ªÉ ch·∫∑n ph√≠m t·∫Øt
            if key == Key.alt:
                self._alt_pressed = False
            elif key == Key.ctrl:
                self._ctrl_pressed = False
            elif key == Key.shift:
                self._shift_pressed = False
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m release: {e}")
    
    def on_key_press(self, key):
        """X·ª≠ l√Ω khi nh·∫•n ph√≠m"""
        try:
            # Theo d√µi modifier keys
            if key == Key.alt:
                self._alt_pressed = True
            elif key == Key.ctrl:
                self._ctrl_pressed = True
            elif key == Key.shift:
                self._shift_pressed = True
            
            # Ch·∫∑n c√°c ph√≠m t·∫Øt h·ªá th·ªëng nguy hi·ªÉm
            if self.is_dangerous_key_combination(key):
                print(f"üö´ Ch·∫∑n ph√≠m t·∫Øt h·ªá th·ªëng: {key}")
                return False
            
            # Cho ph√©p c√°c ph√≠m c·∫ßn thi·∫øt cho nh·∫≠p m·∫≠t kh·∫©u
            if self.is_allowed_key(key):
                return True
            
            # Ch·∫∑n t·∫•t c·∫£ c√°c ph√≠m kh√°c
            return False
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√≠m: {e}")
            return False
    
    def is_allowed_key(self, key):
        """Ki·ªÉm tra xem c√≥ ph·∫£i ph√≠m ƒë∆∞·ª£c ph√©p kh√¥ng"""
        if hasattr(key, 'char') and key.char:
            return True
        
        allowed_keys = [
            Key.backspace, Key.delete, Key.left, Key.right, 
            Key.up, Key.down, Key.home, Key.end, Key.enter,
            Key.tab, Key.space
        ]
        
        if key in allowed_keys:
            return True
        
        return False
    
    def start_system_monitor(self):
        """Kh·ªüi ƒë·ªông thread gi√°m s√°t ph√≠m t·∫Øt h·ªá th·ªëng"""
        def monitor():
            while self.running:
                try:
                    # Ch·∫∑n Alt+Tab
                    if win32api.GetAsyncKeyState(VK_TAB) & 0x8000:
                        if win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                            print("üö´ Ch·∫∑n Alt+Tab (backup)")
                            time.sleep(0.001)
                            continue
                    
                    # Ch·∫∑n Alt+F4
                    if win32api.GetAsyncKeyState(VK_F4) & 0x8000:
                        if win32api.GetAsyncKeyState(VK_MENU) & 0x8000:
                            print("üö´ Ch·∫∑n Alt+F4 (backup)")
                            time.sleep(0.001)
                            continue
                    
                    # Ch·∫∑n Windows key
                    if win32api.GetAsyncKeyState(VK_LWIN) & 0x8000 or \
                       win32api.GetAsyncKeyState(VK_RWIN) & 0x8000:
                        print("üö´ Ch·∫∑n Windows key (backup)")
                        time.sleep(0.001)
                        continue
                    
                    # Ch·∫∑n Ctrl+Alt+Del
                    if win32api.GetAsyncKeyState(VK_DELETE) & 0x8000:
                        if (win32api.GetAsyncKeyState(VK_CONTROL) & 0x8000 and 
                            win32api.GetAsyncKeyState(VK_MENU) & 0x8000):
                            print("üö´ Ch·∫∑n Ctrl+Alt+Del (backup)")
                            time.sleep(0.001)
                            continue
                    
                    time.sleep(0.001)
                    
                except Exception as e:
                    print(f"‚ùå L·ªói gi√°m s√°t ph√≠m: {e}")
                    time.sleep(0.1)
        
        self.monitor_thread = threading.Thread(target=monitor, daemon=True)
        self.monitor_thread.start()
        print("‚úÖ System monitor thread ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!")

def main():
    """H√†m ch√≠nh"""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Pygame Screen Protector')
    parser.add_argument('-msg', '--message', type=str, default='', 
                       help='Custom message to display below the clock')
    parser.add_argument('-pw', '--password', type=str, default=None,
                       help='Temporary password to unlock the screen (default: 123456)')
    args = parser.parse_args()
    
    print("üöÄ Kh·ªüi ƒë·ªông Pygame Screen Protector...")
    print("üîë M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: 123456")
    print("üéÆ Click chu·ªôt ƒë·ªÉ hi·ªán/·∫©n √¥ m·∫≠t kh·∫©u")
    print("‚å®Ô∏è  Nh·∫•n Enter ƒë·ªÉ x√°c nh·∫≠n m·∫≠t kh·∫©u")
    print("üõ°Ô∏è  ƒê√£ b·∫≠t ch·∫ø ƒë·ªô b·∫£o v·ªá ch·∫∑n ph√≠m t·∫Øt h·ªá th·ªëng!")
    if args.message:
        print(f"üí¨ Custom message: {args.message}")
    if args.password:
        print(f"üîë S·ª≠ d·ª•ng m·∫≠t kh·∫©u t·∫°m th·ªùi: {args.password}")
    else:
        print(f"üîë S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: 123456")
    print("=" * 50)
    
    try:
        app = PygameScreenProtector(args.message, args.password)
        app.run()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
